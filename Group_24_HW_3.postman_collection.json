{
	"info": {
		"_postman_id": "55457270-f1f1-47fc-912d-4484161f281c",
		"name": "Group_24_HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Необходимо залогиниться POST. Приходящий токен передать во все остальные запросы:\r",
							"\r",
							"var responseData = pm.response.json();\r",
							"var get_token = responseData.token;\r",
							"pm.environment.set(\"token\", get_token);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1111",
							"type": "text"
						}
					]
				},
				"url": "{{url}}login"
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200:\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json();\r",
							"console.log(responseData)\r",
							"\r",
							"var request = JSON.parse(request.data);\r",
							"console.log(request)\r",
							"\r",
							"// Проверка структуры json в ответе:\r",
							"\r",
							"var schema = {\r",
							"\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}  \r",
							"    pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// В ответе указаны коэффицикнты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент: \r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_6_months).to.eql(request.salary*2);\r",
							"});\r",
							"console.log(responseData.qa_salary_after_6_months)\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_12_months).to.eql(request.salary*2.9);\r",
							"});\r",
							"console.log(responseData.qa_salary_after_12_months)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(responseData.person.u_salary_1_5_year).to.eql(+request.salary*4);\r",
							"});\r",
							"console.log(responseData.person.u_salary_1_5_year)\r",
							"\r",
							"// Достать значение из поля `u_salary_1_5_year` и передать в поле salary запроса http:162.55.220.72:5005/get_test_user:\r",
							"\r",
							"pm.environment.set(\"u_salary_1_5_year\",responseData.person.u_salary_1_5_year)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 35,\r\n    \"salary\": 700,\r\n    \"name\": \"Andrey\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}user_info"
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200:\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json();\r",
							"console.log(responseData)\r",
							"\r",
							"var request = request.data;\r",
							"console.log(request)\r",
							"\r",
							"// Проверка структуры json в ответе:\r",
							"\r",
							"var schema = {\r",
							"\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффицикнты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент: \r",
							"\r",
							"pm.test(\"Check_salary2\", function () {\r",
							"    pm.expect(+responseData.salary[1]).to.eql(request.salary*2);\r",
							"});\r",
							"console.log(responseData.salary[1])\r",
							"\r",
							"pm.test(\"Check_salary3\", function () {\r",
							"    pm.expect(+responseData.salary[2]).to.eql(request.salary*3);\r",
							"});\r",
							"console.log(responseData.salary[2])\r",
							" \r",
							" //Проверить, что второй элемент массива salary больше первого и нулевого:\r",
							"\r",
							"pm.test(\"Salary_compare\", function () {\r",
							"    pm.expect(responseData.salary[2] > responseData.salary[1]).to.be.true;\r",
							"    pm.expect(responseData.salary[2] > responseData.salary[0]).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": "{{url}}new_data"
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200:\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json();\r",
							"console.log(responseData)\r",
							"\r",
							"var request = request.data;\r",
							"console.log(request)\r",
							"\r",
							"// Проверка структуры json в ответе:\r",
							"\r",
							"var schema = {\r",
							"\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффицикнты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент: \r",
							"\r",
							"pm.test(\"Check_daily_food\", function () {\r",
							"    pm.expect(responseData.daily_food).to.eql(request.weight*0.012);\r",
							"});\r",
							"console.log(responseData.daily_food)\r",
							"\r",
							"pm.test(\"Check_daily_sleep\", function () {\r",
							"    pm.expect(responseData.daily_sleep).to.eql(request.weight*2.5);\r",
							"});\r",
							"console.log(responseData.daily_sleep)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "95",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": "{{url}}test_pet_info"
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200:\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json();\r",
							"console.log(responseData)\r",
							"\r",
							"var request = request.data;\r",
							"console.log(request)\r",
							"\r",
							"// Проверка структуры json в ответе:\r",
							"\r",
							"var schema = {\r",
							"\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
							"\r",
							"});\r",
							"\r",
							"// Проверить, что значение поля name = значению переменной name из окружения:\r",
							"\r",
							"pm.test(\"Check_name\", function () {\r",
							"    pm.expect(responseData.name).to.eql(pm.environment.get(\"name\"))\r",
							"});\r",
							"console.log(responseData.name )\r",
							"console.log(pm.environment.get(\"name\"))\r",
							"\r",
							"// Проверить, что значение поля age в ответе соответствует отправленному в запросе значению поля age:\r",
							"\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(+responseData.age).to.eql(35)\r",
							"});\r",
							"console.log(+responseData.age)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": "{{url}}get_test_user"
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var responseData = pm.response.json();\r",
							"console.log(responseData)\r",
							"\r",
							"var request = request.data;\r",
							"console.log(request)\r",
							"\r",
							"\r",
							"// Взять любой объект из присланного списка, используя jsrandom:\r",
							"\r",
							"var random_object  = responseData[Math.floor(Math.random()*responseData.length)]\r",
							"console.log(random_object );\r",
							"\r",
							"// В объекте взять Cur_ID и передать через окружение в следующий запрос:\r",
							"\r",
							"\r",
							"pm.environment.set(\"Cur_ID\",random_object.Cur_ID)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": "{{url}}currency"
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200:\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var responseData = pm.response.json();\r",
							"console.log(responseData)\r",
							"\r",
							"var request = request.data;\r",
							"console.log(request)\r",
							"\r",
							"// Проверка структуры json в ответе:\r",
							"\r",
							"var schema = {\r",
							"\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": "{{url}}curr_byn"
			},
			"response": []
		}
	]
}