{
	"info": {
		"_postman_id": "71cca124-bb2a-48d2-a839-5f70df0aad40",
		"name": "Group_24_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "HW_2",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Проверить, что в body приходит правильный стринг:\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://162.55.220.72:5005/first"
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Спарсить response body в json:\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Проверить, что name в ответе равно name с request (name вбить руками).\r",
									"\r",
									"pm.test(\"name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"Andrey\");\r",
									"});\r",
									"console.log(jsonData.name)\r",
									"// Проверить, что age в ответе равно age с request (age вбить руками).\r",
									"\r",
									"pm.test(\"age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(\"35\");\r",
									"});\r",
									"\r",
									"// Проверить, что salary в ответе равно salary с request (salary вбить руками).\r",
									"\r",
									"pm.test(\"salary\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(1000);\r",
									"});\r",
									"\r",
									"// Спасить request:\r",
									"\r",
									"var request = request.data;\r",
									"\r",
									"// Проверить, что name в ответе равно name с request (name забрать из request.):\r",
									"\r",
									"pm.test(\"Your_name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(request.name);\r",
									"});\r",
									"console.log(jsonData.name)\r",
									"\r",
									"// Проверить, что age в ответе равно age с request (age забрать из request.):\r",
									"\r",
									"pm.test(\"Your_age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(request.age);\r",
									"});\r",
									"console.log(jsonData.age)\r",
									"\r",
									"// Проверить, что salary в ответе равно salary с request (salary забрать из request.):\r",
									"\r",
									"pm.test(\"Your_salary\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(+request.salary);\r",
									"});\r",
									"console.log(jsonData.salary)\r",
									"\r",
									"// Вывести в консоль параметр family из response:\r",
									"\r",
									"console.log(jsonData.family)\r",
									"\r",
									"// Проверить, что u_salary_1_5_year в ответе равен salary*4 из request (salary забрать из request)\r",
									"\r",
									"pm.test(\"u_salary_1_5_year\", function () {\r",
									"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+request.salary*4);\r",
									"});\r",
									"console.log(jsonData.family.u_salary_1_5_year)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Andrey",
									"type": "text"
								},
								{
									"key": "age",
									"value": "35",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": "{{url}}user_info_3"
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Спарсить response body в json:\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Спасить request:\r",
									"\r",
									"var request = pm.request.url.query.toObject();\r",
									"console.log(request)\r",
									"\r",
									"// Проверить, что name в ответе равно name с request (name забрать из request.):\r",
									"\r",
									"pm.test(\"Your_name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(request.name);\r",
									"});\r",
									"console.log(jsonData.name)\r",
									"\r",
									"// Проверить, что age в ответе равно age с request (age забрать из request.):\r",
									"\r",
									"pm.test(\"Your_age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(request.age);\r",
									"});\r",
									"console.log(jsonData.age)\r",
									"\r",
									"// Проверить, что salary в ответе равно salary с request (salary забрать из request.):\r",
									"\r",
									"pm.test(\"Your_salary\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(+request.salary);\r",
									"});\r",
									"console.log(jsonData.salary)\r",
									"\r",
									"// Вывести в консоль параметр family из response:\r",
									"\r",
									"console.log(jsonData.family)\r",
									"\r",
									"// Проверить, что у параметра dog есть параметры name:\r",
									"\r",
									"pm.test(\"Your_dog_name\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
									"});\r",
									"console.log(jsonData.family.pets.dog.name)\r",
									"\r",
									"// Проверить, что у параметра dog есть параметры age:\r",
									"\r",
									"pm.test(\"Your_dog_age\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
									"});\r",
									"console.log(jsonData.family.pets.dog.age)\r",
									"\r",
									"// Проверить, что параметр name имеет значение Luky:\r",
									"\r",
									"pm.test(\"Your_dog_name_Luky\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
									"});\r",
									"console.log(jsonData.family.pets.dog.name)\r",
									"\r",
									"// Проверить, что параметр age имеет значение 4:\r",
									"\r",
									"pm.test(\"Your_dog_age\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
									"});\r",
									"console.log(jsonData.family.pets.dog.age)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}object_info_3?name=Andrey&age=35&salary=700",
							"host": [
								"{{url}}object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Andrey"
								},
								{
									"key": "age",
									"value": "35"
								},
								{
									"key": "salary",
									"value": "700"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Спарсить response body в json:\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Спасить request:\r",
									"\r",
									"var request = pm.request.url.query.toObject();\r",
									"console.log(request)\r",
									"\r",
									"// Проверить, что name в ответе равно name с request (name забрать из request.):\r",
									"\r",
									"pm.test(\"Your_name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(request.name);\r",
									"});\r",
									"console.log(jsonData.name)\r",
									"\r",
									"// Проверить, что age в ответе равно age с request (age забрать из request.):\r",
									"\r",
									"pm.test(\"Your_age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(+request.age);\r",
									"});\r",
									"console.log(jsonData.age)\r",
									"\r",
									"// Вывести в консоль параметр salary из request:\r",
									"\r",
									"console.log(request.salary)\r",
									"\r",
									"// Вывести в консоль параметр salary из response:\r",
									"\r",
									"console.log(jsonData.salary)\r",
									"\r",
									"// Вывести в консоль нулевой элемент параметра salary из response:\r",
									"\r",
									"console.log(jsonData.salary[0])\r",
									"\r",
									"// Вывести в консоль первый элемент параметра salary из response:\r",
									"\r",
									"console.log(jsonData.salary[1])\r",
									"\r",
									"// Вывести в консоль второй элемент параметра salary из response:\r",
									"\r",
									"console.log(jsonData.salary[2])\r",
									"\r",
									"// Проверить, что нулевой элемент параметра salary равен salary из request (salary забрать из request.):\r",
									"\r",
									"pm.test(\"Your_salary_0\", function () {\r",
									"    pm.expect(jsonData.salary[0]).to.eql(+request.salary);\r",
									"});\r",
									"console.log(jsonData.salary[0])\r",
									"\r",
									"// Проверить, что первый элемент параметра salary равен salary*2 из request (salary забрать из request.):\r",
									"\r",
									"pm.test(\"Your_salary_1\", function () {\r",
									"    pm.expect(+jsonData.salary[1]).to.eql(request.salary*2);\r",
									"});\r",
									"console.log(jsonData.salary[1])\r",
									"\r",
									"// Проверить, что второй элемент параметра salary равен salary*3 из request (salary забрать из request.):\r",
									"\r",
									"pm.test(\"Your_salary_2\", function () {\r",
									"    pm.expect(+jsonData.salary[2]).to.eql(request.salary*3);\r",
									"});\r",
									"console.log(jsonData.salary[2])\r",
									"\r",
									"// Создать в окружении переменную name:\r",
									"\r",
									"pm.environment.set(\"name\");\r",
									"\r",
									"// Создать в окружении переменную age:\r",
									"\r",
									"pm.environment.set(\"age\");\r",
									"\r",
									"// Создать в окружении переменную salary:\r",
									"\r",
									"pm.environment.set(\"salary\");\r",
									"\r",
									"// Передать в окружение переменную name:\r",
									"\r",
									"pm.environment.set(\"name\", jsonData.name);\r",
									"\r",
									"// Передать в окружение переменную name:\r",
									"\r",
									"pm.environment.set(\"age\", jsonData.age);\r",
									"\r",
									"// Передать в окружение переменную name:\r",
									"\r",
									"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
									"\r",
									"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary:\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"console.log(jsonData)\r",
									"\r",
									"var salary = jsonData.salary;\r",
									"console.log(salary)\r",
									"\r",
									"for (var i of salary) {\r",
									"    console.log(\"salary =\", i);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}object_info_4?name=Andrey&age=35&salary=700",
							"host": [
								"{{url}}object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Andrey"
								},
								{
									"key": "age",
									"value": "35"
								},
								{
									"key": "salary",
									"value": "700"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Спарсить response body в json:\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"\r",
									"// Спасить request:\r",
									"\r",
									"var request = request.data;\r",
									"console.log(request)\r",
									"\r",
									"// Проверить, что json response имеет start_qa_salary:\r",
									"\r",
									"pm.test(\"start_qa_salary\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет start_qa_salary_after_6_months:\r",
									"\r",
									"pm.test(\"qa_salary_after_6_months\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет start_qa_salary_after_12_months:\r",
									"\r",
									"pm.test(\"qa_salary_after_12_months\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет start_qa_salary_after_1.5_year:\r",
									"\r",
									"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет start_qa_salary_after_3.5_years:\r",
									"\r",
									"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет person:\r",
									"\r",
									"pm.test(\"person\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"person\");\r",
									"});\r",
									"\r",
									"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
									"\r",
									"pm.test(\"start_qa_salary\", function () {\r",
									"    pm.expect(jsonData.start_qa_salary).to.eql(+request.salary);\r",
									"});\r",
									"console.log(jsonData.start_qa_salary)\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
									"\r",
									"pm.test(\"qa_salary_after_6_months\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+request.salary*2);\r",
									"});\r",
									"console.log(jsonData.qa_salary_after_6_months)\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
									"\r",
									"pm.test(\"qa_salary_after_12_months\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+request.salary*2.7);\r",
									"});\r",
									"console.log(jsonData.qa_salary_after_12_months)\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
									"\r",
									"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+request.salary*3.3);\r",
									"});\r",
									"console.log(jsonData[\"qa_salary_after_1.5_year\"])\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
									"\r",
									"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+request.salary*3.8);\r",
									"});\r",
									"console.log(jsonData[\"qa_salary_after_3.5_years\"])\r",
									"\r",
									"// Проверить, что в параметре person, первый элемент из u_name равен salary из request (age забрать из request):\r",
									"\r",
									"pm.test(\"salary\", function () {\r",
									"    pm.expect(jsonData.person.u_name[1]).to.eql(+request.salary);\r",
									"});\r",
									"console.log(jsonData.person.u_name[1])\r",
									"\r",
									"// Проверить, что параметр u_age равен age из request (age забрать из request)\r",
									"\r",
									"pm.test(\"u_age\", function () {\r",
									"    pm.expect(jsonData.person.u_age).to.eql(+request.age);\r",
									"});\r",
									"console.log(jsonData.person.u_age)\r",
									"\r",
									"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
									"\r",
									"pm.test(\"u_salary_5_years\", function () {\r",
									"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+request.salary*4.2);\r",
									"});\r",
									"console.log(jsonData.person.u_salary_5_years)\r",
									"\r",
									"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person:\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"console.log(jsonData)\r",
									"\r",
									"var person = jsonData.person;\r",
									"console.log(person)\r",
									"\r",
									"for (var i in person) {\r",
									"    console.log(\"person =\", i);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": "{{url}}user_info_2"
					},
					"response": []
				}
			]
		}
	]
}